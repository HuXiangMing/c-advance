// 0-03 Sort_Insert.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
// 插入排序

// 核心思想：对后面n-1个元素依次与前面的元素进行比较，并将它们插入到一个已排序的数组中

// 时间复杂度为O(n^2)，n表示数组的长度。当数组随机排列时，插入排序的时间复杂度为O(n^2)
// 空间复杂度为O(1)，因为该算法只需要使用固定的额外空间来存储一些辅助变量以及进行元素交换操作，并不需要分配额外的空间来存储排序结果。

#include <iostream>

void sort_insert(int arr[], int len)
{    
	//i左边位已排序，i右边未排序
	for (size_t i = 1; i < len; i++)
	{		
		int temp = arr[i];// 待插入的值
		int j = i - 1;// 跟前方有序的比较

		//跟前面j个元素进行比较
		while (j>=0 && arr[j] > temp)
		{			
			arr[j+1] = arr[j];
			j--;
		}

		//插入
		arr[j+1] = temp;


		//交换一次进行打印
		for (size_t i = 0; i < len; i++)
		{
			std::cout << arr[i] << " ";
		}
		std::cout << std::endl;
	}
}

int main()
{
	int arr[10] = { 5,8,9,2,4,55,77,99,33,15 };
	int len = sizeof(arr) / sizeof(arr[0]);
	sort_insert(arr, len);
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
